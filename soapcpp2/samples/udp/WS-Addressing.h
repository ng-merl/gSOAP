/* WS-Addressing.h
   Generated by wsdl2h 1.2.0 from WS-Addressing.xsd and WS-typemap.dat
   2005-05-04 18:31:55 GMT
   Copyright (C) 2001-2005 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use wsdl2h option -l to view the software license terms.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - To build with STL, stlvector.h from the gSOAP distribution must be in the
   current directory. Or use soapcpp2 option -I<path> with path to stlvector.h.
 - Use typemap.dat to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to typemap.dat to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.

*/

/******************************************************************************\
 *                                                                            *
 * http://schemas.xmlsoap.org/ws/2004/08/addressing                           *
 *                                                                            *
\******************************************************************************/

// removed 'w' to enable .wsdl and .xsd generation:
//gsoapopt c


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

wsa = "http://schemas.xmlsoap.org/ws/2004/08/addressing"

*/

//gsoap wsa   schema namespace:	http://schemas.xmlsoap.org/ws/2004/08/addressing
//gsoap wsa   schema elementForm:	qualified
//gsoap wsa   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



typedef _QName wsa__AttributedQName;
typedef char* wsa__AttributedURI;

/// Schema "http://schemas.xmlsoap.org/ws/2004/08/addressing":RelationshipTypeValues simpleType restriction of xs:QName

/// Note: enum values are prefixed with 'wsa__RelationshipTypeValues' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum wsa__RelationshipTypeValues
{	wsa__RelationshipTypeValues__wsa__Reply,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":Reply"
};

/// Schema "http://schemas.xmlsoap.org/ws/2004/08/addressing":FaultSubcodeValues simpleType restriction of xs:QName

/// Note: enum values are prefixed with 'wsa__FaultSubcodeValues' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum wsa__FaultSubcodeValues
{	wsa__FaultSubcodeValues__wsa__InvalidMessageInformationHeader,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":InvalidMessageInformationHeader"
	wsa__FaultSubcodeValues__wsa__MessageInformationHeaderRequired,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":MessageInformationHeaderRequired"
	wsa__FaultSubcodeValues__wsa__DestinationUnreachable,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":DestinationUnreachable"
	wsa__FaultSubcodeValues__wsa__ActionNotSupported,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":ActionNotSupported"
	wsa__FaultSubcodeValues__wsa__EndpointUnavailable,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointUnavailable"
};

/// Schema http://schemas.xmlsoap.org/ws/2004/08/addressing:"EndpointReferenceType"

struct wsa__EndpointReferenceType
{
/// Element Address of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI
    wsa__AttributedURI                   Address                        1;	///< Required element
/// Element ReferenceProperties of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferencePropertiesType
    struct wsa__ReferencePropertiesType*  ReferenceProperties            0;	///< Optional element
/// Element ReferenceParameters of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferenceParametersType
    struct wsa__ReferenceParametersType*  ReferenceParameters            0;	///< Optional element
/// Element PortType of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedQName
    wsa__AttributedQName                 PortType                       0;	///< Optional element
/// Element ServiceName of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ServiceNameType
    struct wsa__ServiceNameType*         ServiceName                    0;	///< Optional element
// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
//       Schema extensibility is user-definable
//       Consult the protocol documentation to insert declarations here:
    _XML                                 __any                         ;	///< Catch any element content in XML string
// TODO: <anyAttribute namespace="##other">
//       Schema extensibility is user-definable
//       Consult the protocol documentation to insert declarations here:
   @_XML                                 __anyAttribute                ;	///< Catch any attribute content in XML string
};

/// Schema http://schemas.xmlsoap.org/ws/2004/08/addressing:"ReferencePropertiesType"

struct wsa__ReferencePropertiesType
{
// TODO: <any minOccurs="0" maxOccurs="unbounded">
//       Schema extensibility is user-definable
//       Consult the protocol documentation to insert declarations here:
    _XML                                 __any                         ;	///< Catch any element content in XML string
};

/// Schema http://schemas.xmlsoap.org/ws/2004/08/addressing:"ReferenceParametersType"

struct wsa__ReferenceParametersType
{
// TODO: <any minOccurs="0" maxOccurs="unbounded">
//       Schema extensibility is user-definable
//       Consult the protocol documentation to insert declarations here:
    _XML                                 __any                         ;	///< Catch any element content in XML string
};

/// Schema http://schemas.xmlsoap.org/ws/2004/08/addressing:"ServiceNameType"

struct wsa__ServiceNameType
{
    _QName                               __item                        ;
/// Attribute PortName of type xs:NCName
   @char*                                PortName                       0;	///< Optional attribute
// TODO: <anyAttribute namespace="##other">
//       Schema extensibility is user-definable
//       Consult the protocol documentation to insert declarations here:
   @_XML                                 __anyAttribute                ;	///< Catch any attribute content in XML string
};

/// Schema http://schemas.xmlsoap.org/ws/2004/08/addressing:"Relationship"

struct wsa__Relationship
{
    char*                                __item                        ;
/// Attribute RelationshipType of type xs:QName
   @_QName                               RelationshipType               0;	///< Optional attribute
// TODO: <anyAttribute namespace="##other">
//       Schema extensibility is user-definable
//       Consult the protocol documentation to insert declarations here:
   @_XML                                 __anyAttribute                ;	///< Catch any attribute content in XML string
};

/* End of WS-Addressing.h */
