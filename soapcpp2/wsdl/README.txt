The gSOAP WSDL parser 'wsdl2h'

INSTRUCTIONS

The gSOAP WSDL parser converts WSDL into a gSOAP header file for processing
with the gSOAP soapcpp2 compiler to generate client stubs/proxies and server
skeletons/objects.

For example:

$ wsdl2h -o XMethodsQuery.h http://www.xmethods.net/wsdl/query.wsdl

You need to have stlvector.h present in the current directory (stlvector.h is
in the package) to support STL vectors. To build without STL, use option -s:

$ wsdl2h -s -o XMethodsQuery.h http://www.xmethods.net/wsdl/query.wsdl

Or to build a pure C application, use option -c:

$ wsdl2h -c -o XMethodsQuery.h http://www.xmethods.net/wsdl/query.wsdl

The above commands are to be followed by the soapcpp2 compilation phase:

$ soapcpp2 XMethodsQuery.h

The generated XMethodsQuery.h includes the definitions of data types and
service operations of the XMethods Query Web service. To develop a C++ client
application, you can use the generated 'soapXMethodsQuerySoapProxy' class and
'XMethodsQuerySoap.nsmap' XML namespace table to access the Web service. Both
need to be '#include'-d in your source. Then compile and link the soapC.cpp,
soapClient.cpp, and stdsoap2.cpp sources to complete the build. More
information can be found in the gSOAP documentation.

When parsing a WSDL, the output file name is the WSDL input file name with
extension '.h' instead of '.wsdl'. When an input file is absent or a WSDL file
from a Web location is accessed, the header output will be produced on the
standard output. An input file may also contain a schema and will be handled as
such.

USING A TYPEMAP FILE TO CONTROL THE OUTPUT

Use the typemap.dat file can be used to define namespace prefix and type
bindings for the generated header files by the 'wsdl2h' tool.  typemap.dat is
the default file processed by 'wsdl2h' to customize its output. You can use
wsdl2h option -t to specify an alternate file.

XML namespace prefix bindings can be provided to override the default choice of
the ns1, ns2, ... prefixes generated by wsdl2h.  It is highly recommended to
provide namespace prefixes for your project's XML namespaces. In this way,
changes to the WSDL (or newer releases of wsdl2h) will have a minimal impact on
coding.

Bindings for namespace prefixes are of the form:
	prefix = "URI"
For example, to bind the 'wsse' prefix to the WS-Security extensions:
	wsse = "http://schemas.xmlsoap.org/ws/2002/04/secext"

Type bindings can by provided to bind XML schema types to C/C++ types for your
project.

Type bindings are of the form:
	prefix__type = declaration | use | ptr-use
where 'declaration' introduces the type in the header file, 'use' specifies how
the type is used directly, 'ptr-use' specifies how the type is used as a
pointer type.

For example:
	xsd__string = | char* | char*
After enabling this line, all XSD strings will be mapped to char*. Note that
the 'declaration' part is empty in this case.

Member data and functions can be provided to extend a generated struct or
class.

Class and struct extensions are of the form:
	prefix__type = $ member-declaration

For example, to add a constructor and destructor to class myns__record:
	myns__record = $ myns__record();
	myns__record = $ ~myns__record();
	
Any other material to be included in the generated header file can be provided
by enclosing the text within brackets [ and ]. Brackets MUST appear at the
start of a new line.

For example, to include a note:
[
// TODO: Don't forget to bind the namespace prefixes!
]
This comment appears as the first line in the generated header file.

INPUT FORMATS

wsdl2h reads from standard input or the file name provided at the command line:

wsdl2h [options] [-o outfile.h] [infile.wsdl]

Valid input file formats are .wsdl and .xsd (schema) files.

OUTPUT FORMAT

The output file is a gSOAP-formatted header file. The header file syntax is
augmented with annotations reflecting WSDL and schema-specific bindings and
validation constraints.

We suggest the use of Doxygen (www.doxygen.org) to produce documented for the
generated header file. However, we STRONGLY recommend user to inspect the
generated header file first for warnings and other annotations indicating
potential problems.

Note that Doxygen's license model does not infinge on your ownership of the
gSOAP source code output when you purchased a commercial license.

COMMAND LINE OPTIONS

-c      generate C code
-e      don't qualify enum names
-f      generate flat C++ class hierarchy
-h      print help information
-l      include license information in output
-m      create modules for separate compilation
-nname  use name as the base namespace prefix instead of 'ns'
-Nname  use name as the base namespace prefix for service namespaces
-ofile  output to file
-p      create polymorphic types with C++ inheritance with base xsd__anyType
-rhost:port
        connect via proxy host and port
-s      do not generate STL code (no std::string and no std::vector)
-tfile  use type map file instead of the default file typemap.dat
-v      verbose output
-w      always wrap response parameters in a response struct (<=1.1.4 behavior)
-?      print help information

DOCUMENTATION

See soapdoc2.pdf for documentation.

INSTALLATION

Type 'make' in the 'wsdl' directory to build wsdl2h. You must first install the
gSOAP package and build the gSOAP compiler soapcpp2 to rebuild the wsdl2h WSDL
parser.

USING SSL FOR HTTPS TRANSFER OF WSDL FILES

You must build the WSDL parser with 'make secure' to build an SSL-enabled
version of wsdl2h that can access HTTPS secure sites.

LICENSE

The gSOAP WSDL parser 'wsdl2h' and source code are released under the GPL.
See gpl.txt for more details. A commercial license is available from Genivia.
Please visit http://genivia.com/Products/gsoap/license.pdf

COPYRIGHT NOTICE

gSOAP XML Web services tools
Copyright (C) 2000-2005, Robert van Engelen, Genivia, Inc. All Rights Reserved.
